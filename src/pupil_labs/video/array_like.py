from typing import Iterator, Protocol, TypeVar, overload

T = TypeVar("T", covariant=True)


class ArrayLike(Protocol[T]):
    def __len__(self) -> int: ...
    @overload
    def __getitem__(self, key: int, /) -> T: ...
    @overload
    def __getitem__(self, key: slice, /) -> "ArrayLike[T]": ...
    def __getitem__(self, key: int | slice, /) -> T | "ArrayLike[T]": ...
    def __iter__(self) -> Iterator[T]: ...
